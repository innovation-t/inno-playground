[ bash ]

ls : 디렉터리 파일목록 보기
cat : 파일 내용 출력
touch : 파일 생성 및 파일 수정시각 변경
rm : 파일 삭제 ( -r : 내부 디렉토리 다 삭제 ( recursive ) , -f 강제삭제 및 디렉터리도 삭제  )
rm -rf 삭제할경로

cd : 위치이동 ( change directory )
pwd : 현재 경로 확인
입력부 << ,>> 출력부 : 덧붙이기
입력부 <, > 출력부 : 덮어서 새로생성

cat (키보드입력) > 파일 :
cat 파일 ( > stdout ) : 파일내용이 스탠다드 아웃풋으로 전달

mkdir : 디렉터리 생성
history : 커맨드라인 기록

[ git ]

git status : 현재 로컬 깃리포지토리 현황 확인 
git clone <주소> : 해당 주소의 저장소내역을 복제
git add <파일명 혹은 와일드카드 * > 스테이지 영역에 작업내역을 올린다
git log : 커밋 기록 확인
git diff : 이전 커밋과 현재 변경 내역의 차이점 출력
git commit : 스테이지 영역의 내역을 커밋한다 ( -m '메세지 개행문자 들어갈수잇음
이렇게' )

git push <저장소명> <브랜치명> : 해당 저장소의 브랜치에 현재 로컬의 브랜치 커밋을 올린다.
git pull <저장소명> <브랜치명> : 해당 저장소의 브랜치의 최신 내용을 현재 로컬 브랜치에 반영
git checkout <브랜치명> : 브랜치 이동
git checkout -b <브랜치명> : 브랜치를 생성하면서 해당 브랜치로 이동
git branch <브랜치명-생성될거> <브랜치명-근원> : 브랜치근원의 내용을 바탕으로 새로운 브랜치를 생성
git branch -D <브랜치명> : 브랜치 삭제

git remote 원격저장소관련
git remote -v (verbose) : 원격저장소 목록 조회
git remote add <저장소명> 주소 : 원격 저장소 추가
git remote remove <저장소명> : 원격 저장소 삭제

git config --global user.name "유저이름설정(깃 커밋 로그에 반영됨)"
git config --global user.email "유저메일설정(깃 커밋 로그에 반영됨)"

git init : 현재 경로에 깃 저장소 생성
git push -u <저장소> <브랜치명> : 저장소에 해당 브랜치가 없는경우 해당브랜치를 생성할 수 있도록 함.

git add .    vs     git add *

.gitignore

